generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String        @id @default(uuid())
  fullname      String
  email         String        @unique
  emailVerified Boolean?      @default(false)
  password      String
  address       String?
  balance       Int           @default(0)
  role          Role          @default(USER)
  verificationToken String?
  profile       userProfile?


  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt


  orders        Order[]
  transactions  Transaction[]
  favoriteFoods Food[]        @relation("FavoritedBy")
}

model userProfile {
  id        String   @id @default(uuid())
  userId    String @unique
  image     String?
  address   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Food {
  id          String   @id @default(uuid())
  name        String
  price       Int
  image       String?
  rating      Float?
  categoryId  String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  description String?
  category    Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  favoritedBy User[]   @relation("FavoritedBy")
  orders      FoodOrders[]
}

model Order {
  id              Int      @id @default(autoincrement())
  status          String
  deliveryAddress String
  paymentMethod   String
  total           Int
  userId          String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  fooditems       FoodOrders[]
}

model FoodOrders {
  id       Int      @id @default(autoincrement())
  quantity Int
  foodId   String
  orderId  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  food     Food     @relation(fields: [foodId], references: [id])
  order    Order    @relation(fields: [orderId], references: [id])
}



model Category {
  id        String   @id @default(uuid())
  name      String
  image     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  foods     Food[]
}

model Transaction {
  id        Int             @id @default(autoincrement())
  userId    String
  amount    Int
  type      TransactionType
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  user      User            @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum Role {
  USER
  ADMIN
}

enum TransactionType {
  TOPUP
  ORDER
}
